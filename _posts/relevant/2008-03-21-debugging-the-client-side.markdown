---
layout: post
title: Debugging the Client Side by Eric DeLabar
metadesc: 
class: post
changefreq: never
priority: 0.9
category: relevant
---
<h1>Debugging the Client Side</h1>
<p>By my definition of <a href="/2008/02/web-20-religion-politics">Web 2.0</a>, one of the key requirements for any application is cross-browser compatibility.  As a company, my employer defines this as <span class="caps">IE</span> 6+, Firefox 2+, and Safari 3 beta; all tested on Windows.  It's not ideal, but it covers a huge chunk of the market.  This stack is pretty easy to test, but occasionally one of the browsers will throw a curve-ball and that's where a typical the members of my team, or <span class="caps">J2EE</span> developers in general, get&nbsp;lost.</p>
<p>When somebody comes across some weird client-side error and they come looking for my help, I start with three&nbsp;questions:</p>
<ol>
<li>Does it <a href="http://validator.w3.org/">validate</a>? (Is it a strict&nbsp;doctype?)</li>
<li>Is it in <a href="http://www.quirksmode.org/css/quirksmode.html">quirks&nbsp;mode</a>?</li>
<li>Did you separate content from presentation from&nbsp;behavior?</li>
</ol>
<p>I think one and two are pretty obvious, if you're not following the standards the browser can (and will) do what it wants with your page.  Follow the rules and your playing field becomes a lot more level.  Number three is a design choice that I prefer for keeping things clean; if your layers are separated, you <em>know</em> what behavior is coming from where.  What does this mean?  It means style is <em>always</em> stored in an external StyleSheet, JavaScript is <em>always</em> stored in an external <span class="caps">JS</span> file, and your <span class="caps">HTML</span> markup has no inline event handlers, script blocks, or style attributes.  Not only does this make things easier to find and debug it also encourages progressive enhancement and accessible&nbsp;design.</p>
<p>Now that you've made sure those three cases are taken care of, do you still have the problem?  I'd say 50% of the time the problem is solved, for the rest, here's what I do.  (First things first, <a href="/2007/02/lets-talk-about-tools-part-1.html">make sure your toolbox is in&nbsp;order</a>.)</p>
<p>For debugging <abbr title="Cascading Style Sheet"><span class="caps">CSS</span></abbr>, use <a href="http://www.getfirebug.com/">Firebug's</a> Inspect tool to make sure the correct <abbr title="Cascading Style Sheet"><span class="caps">CSS</span></abbr> rules are applying to your element, this will show you which rules are applying and more importantly, which one is winning in the case of a conflict.  If the problem is not showing up in <a href="http://www.mozilla.com/en-US/firefox/">Firefox</a>, I'm guessing it also works in Safari, so it has be an <span class="caps">IE</span> issue.  Check your <code>float</code>s, check your <code>width</code>s, and make sure you're not relying on anything IE doesn't support, like <code>min-height</code> or <code>max-height</code>.  If you're still not sure what's going on, checkout the Microsoft Developer Toolbar.  To get it, go to Microsoft.com and search for "Developer Toolbar," I'd post a link, but every time I try bookmarking the page it moves, so it's probably just easier to search for it.  The Developer Toolbar works similarly to <a href="http://www.getfirebug.com/">Firebug</a>, but is definitely lacking.  If your problem is in Safari, get a copy of the <a href="http://webkit.org/">Webkit</a> Nightly and enable the <a href="http://trac.webkit.org/projects/webkit/wiki/Web%20Inspector">Web Inspector</a>.  It's definitely better than the <span class="caps">IE</span> Developer Toolbar, but still not <a href="http://www.getfirebug.com/">Firebug</a>.  In a pinch, try out the <a href="http://www.westciv.com/">WestCiv</a> <a href="http://www.westciv.com/xray/index.html"><span class="caps">XRAY</span></a> and <a href="http://www.westciv.com/mri/index.html"><span class="caps">MRI</span></a> bookmarklets which are easy enough to install and uninstall on a workstation that is not your&nbsp;own.</p>
<p>If you're debugging JavaScript, the <a href="http://www.getfirebug.com">Firebug</a> console is definitely the way to go for tracing, and you can even make it work on other browsers with their handy <a href="http://www.getfirebug.com/lite.html" title="Firebug Lite">JavaScript-based utility</a>.  For <span class="caps">IE</span> specific errors you can try your luck with the Microsoft Script Debugger (again, search for it), but I find it to be a little bloated.  At the time of this writing Webkit offers its own debugger in the form of <a href="http://trac.webkit.org/projects/webkit/wiki/Drosera">Drosera</a>, but it's Mac-only, so unless you've got one you're out of luck there.  Finally, you can try out <a href="http://aptana.com/studio/">Aptana Studio</a> which offers JavaScript debugging in Firefox (also in <span class="caps">IE</span> if you're willing to pay for it), but I haven't had a chance to really give it a test drive and at initial glance it seems a little clunky when working with&nbsp;<span class="caps">J2EE</span>.</p>
<p>There's a ton of tools out there for debugging client-side problems, and with a little practice you'll be debugging like a pro in no time at all.  But please, remember one thing, the best offense is a good defense, separate your layers, avoid <span class="caps">CSS</span> hacks, and do things the right way the first&nbsp;time.</p>