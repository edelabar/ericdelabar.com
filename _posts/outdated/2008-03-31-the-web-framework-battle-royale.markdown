---
layout: post
title: The Web Framework Battle Royale by Eric DeLabar
metadesc: 
class: post disclaimer
changefreq: never
priority: 0.4
category: outdated
---
<h1>The Web Framework Battle Royale</h1>
<p>As you have probably guessed from the subtitle of this blog, I'm a Java guy at heart, in most cases I live and breathe <a href="http://www.springframework.org/">Spring</a>.  This doesn't mean my eyes aren't open to the fact that there are other web frameworks out there, in fact I've done my share of experimenting with <a href="http://www.rubyonrails.com/">RoR</a>, <a href="http://www.cakephp.org/">CakePHP</a>, and even <a href="http://www.djangoproject.com/">Django</a>; as soon as I get a chance I'll also be playing with <a href="http://grails.codehaus.org/">Grails</a>.  With that said, I'm going to step into the&nbsp;ring.</p>
<p>At the <a href="http://www.phillyemergingtech.com/">Philly Emerging Tech conference last week</a> there was a panel I wish I would have attended entitled "<a href="http://www.phillyemergingtech.com/abstracts.php#frameworks">Battle of the Frameworks! A Roundtable Debate - Which Framework Will be Left Standing?</a>"  An amazing topic, but with a fundamental flaw; why does only one need to be left standing?  There's a framework for every budget, language, and style of programming out there; different frameworks are what makes the industry grow and innovate.  I work for a company that works for big companies, big companies seem to have a tendency of throwing unreasonable amounts of money at simple problems because some other big company has attached their name to a so-called solution.  Is this the right way to make a website?  Probably not, but I can't argue with it because it pays my&nbsp;salary.</p>
<p>Once you step away from the "Enterprise" languages and app-servers you find yourself wandering through an interesting new world of start-ups, consultants, and hobbyists.  These are the people who push the new breed of framework, they're also the ones that push innovation on the web, these are the people that invented web 2.0, and the people that will discover web 3.0 right around the time the "enterprise" figures out what web 2.0 really means.  The new frameworks are for innovating entrepreneurs, the old ones are for corporate behemoths.  If you fall in between, my personal money's on the solution with the least amount of risk, and I highly doubt that it's the one that requires a rack's worth of servers and $250,000 worth of software&nbsp;licenses.</p>
<p>That's my two cents; <a href="http://gilesbowkett.blogspot.com/2008/03/plato-says-knock-you-out.html">for a different perspective, check out Giles Bowkett's commentary on the web-framework panel, there's nothing quite like bringing a little Plato to the table when discussing a near-fistfight at a conference panel</a>. (I saw <a href="http://www.phillyemergingtech.com/abstracts.php#bowkett">Giles' presentation on Metaprogramming</a> at the conference, and I have to say, the more I think about it the more interested I'm becoming in the topic, even if it is a Rails thing.)  On a related topic, Giles mentions <a href="http://www.phillyemergingtech.com/speakers.php#fernandez">Obie Fernandez</a> in his post, who's company <a href="http://www.hashrocket.com/products">Hash Rocket offers the service where they design version 1.0 of you website in three days on rails</a>.  Mind you, I'm sure this is version one from the <a href="https://gettingreal.37signals.com/">37signals perspective</a>, but do you really need to risk hundreds of thousands of dollars and months of time to find out your idea is not going to make it?  Besides when was the last time you saw a full-featured Java <span class="caps">EE</span> app built in three days?  Ladies and gentleman, there's plenty of room for plenty of frameworks and all of the competition and debate that goes with them; I for one cannot wait until the next contender steps into the&nbsp;ring.</p>